service: fault-tolerant-app-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-north-1
  stage: dev
  environment:
    TASKS_TABLE: ${self:service}-tasks-${opt:stage, self:provider.stage}
    TASKS_QUEUE_URL: 
      Ref: tasksQueue
    DLQ_QUEUE_URL:
      Ref: tasksQueueDLQ
    CONNECTIONS_TABLE: ${self:service}-connections-${opt:stage, self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Scan
            - dynamodb:GetItem
          Resource: 
            Fn::GetAtt: [ tasksTable, Arn ]
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - Fn::GetAtt: [ tasksQueue, Arn ]
            - Fn::GetAtt: [ tasksQueueDLQ, Arn ]
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - Fn::GetAtt: [ tasksQueue, Arn ]
            - Fn::GetAtt: [ tasksQueueDLQ, Arn ]
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
          Resource: 
            Fn::GetAtt: [ connectionsTable, Arn ]
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource: "*"  # TODO: this should be restricted to the websocket api for production

# plugins:
#   - serverless-dotenv-plugin
#   - serverless-offline

functions:
  submitTask:
    handler: handlers/submitTask.handler
    events:
      - http:
          path: tasks
          method: post
          cors:
            origin: "http://localhost:4200"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false              
  getTasks:
    handler: handlers/getTasks.handler
    events:
      - http:
          path: tasks
          method: get
          cors:
            origin: "http://localhost:4200"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Amz-Security-Token
              - X-Api-Key
            allowCredentials: false
  processTask:
    handler: handlers/processTask.handler
    events:
      - sqs:
          arn: 
            Fn::GetAtt: [ tasksQueue, Arn ]
          batchSize: 1
  dlqHandler:
    handler: handlers/dlqHandler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ tasksQueueDLQ, Arn ]
          batchSize: 1
  wsConnect:
    handler: handlers/websocket/wsConnect.handler
    events:
      - websocket:
          route: $connect
  wsDisconnect:
    handler: handlers/websocket/wsDisconnect.handler
    events:
      - websocket:
          route: $disconnect
  wsDefault:
    handler: handlers/websocket/wsDefault.handler
    events:
      - websocket:
          route: $default

resources:
  Resources:
    tasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TASKS_TABLE}
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    tasksQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-tasksQueue-${opt:stage, self:provider.stage}
        VisibilityTimeout: 30
        RedrivePolicy:
          deadLetterTargetArn: 
            Fn::GetAtt: [ tasksQueueDLQ, Arn ]
          maxReceiveCount: 3
    tasksQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-tasksQueueDLQ-${opt:stage, self:provider.stage}
        MessageRetentionPeriod: 1209600
    connectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

outputs:
  websocketEndpoint:
    Description: "WebSocket API Endpoint"
    Value:
      Fn::Join:
        - ""
        - - "wss://"
          - Ref: ApiGatewayWebsocketApi
          - ".execute-api."
          - Ref: AWS::Region
          - ".amazonaws.com/"
          - ${self:provider.stage}
